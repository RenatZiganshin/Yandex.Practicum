{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Исследование надёжности заёмщиков\n",
    "\n",
    "Заказчик — кредитный отдел банка. Нужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок. Входные данные от банка — статистика о платёжеспособности клиентов.\n",
    "\n",
    "Результаты исследования будут учтены при построении модели **кредитного скоринга** — специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 1. Изучение общей информации"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from pymystem3 import Mystem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-8437.673028</td>\n",
       "      <td>42</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>253875.639453</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-4024.803754</td>\n",
       "      <td>36</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>112080.014102</td>\n",
       "      <td>приобретение автомобиля</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>-5623.422610</td>\n",
       "      <td>33</td>\n",
       "      <td>Среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>145885.952297</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>-4124.747207</td>\n",
       "      <td>32</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>267628.550329</td>\n",
       "      <td>дополнительное образование</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>340266.072047</td>\n",
       "      <td>53</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>пенсионер</td>\n",
       "      <td>0</td>\n",
       "      <td>158616.077870</td>\n",
       "      <td>сыграть свадьбу</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years education  education_id  \\\n",
       "0         1   -8437.673028         42    высшее             0   \n",
       "1         1   -4024.803754         36   среднее             1   \n",
       "2         0   -5623.422610         33   Среднее             1   \n",
       "3         3   -4124.747207         32   среднее             1   \n",
       "4         0  340266.072047         53   среднее             1   \n",
       "\n",
       "      family_status  family_status_id gender income_type  debt   total_income  \\\n",
       "0   женат / замужем                 0      F   сотрудник     0  253875.639453   \n",
       "1   женат / замужем                 0      F   сотрудник     0  112080.014102   \n",
       "2   женат / замужем                 0      M   сотрудник     0  145885.952297   \n",
       "3   женат / замужем                 0      M   сотрудник     0  267628.550329   \n",
       "4  гражданский брак                 1      F   пенсионер     0  158616.077870   \n",
       "\n",
       "                      purpose  \n",
       "0               покупка жилья  \n",
       "1     приобретение автомобиля  \n",
       "2               покупка жилья  \n",
       "3  дополнительное образование  \n",
       "4             сыграть свадьбу  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('/datasets/data.csv')\n",
    "#Смотрим первые 5 строк таблицы\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21525 entries, 0 to 21524\n",
      "Data columns (total 12 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   children          21525 non-null  int64  \n",
      " 1   days_employed     19351 non-null  float64\n",
      " 2   dob_years         21525 non-null  int64  \n",
      " 3   education         21525 non-null  object \n",
      " 4   education_id      21525 non-null  int64  \n",
      " 5   family_status     21525 non-null  object \n",
      " 6   family_status_id  21525 non-null  int64  \n",
      " 7   gender            21525 non-null  object \n",
      " 8   income_type       21525 non-null  object \n",
      " 9   debt              21525 non-null  int64  \n",
      " 10  total_income      19351 non-null  float64\n",
      " 11  purpose           21525 non-null  object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "#Общая информация о таблице:\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По первым значениям строк бросается в глаза некорректность данных в столбце 'days_employed'. \n",
    "Судя по количеству значений, пропуски есть в столбцах 'days_employed' и 'total_income'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 2. Предобработка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка пропусков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Среднее арифметическое значение стажа в днях: 63046.49766147338\n",
      "Медианное значение стажа в днях: -1203.369528770489\n",
      "количество строк с отрицательным значением стажа: 15906\n"
     ]
    }
   ],
   "source": [
    "#Изучим подробнее столбец 'days_employed'\n",
    "print('Среднее арифметическое значение стажа в днях:', data['days_employed'].mean())\n",
    "print('Медианное значение стажа в днях:', data['days_employed'].median())\n",
    "#найдем количество строк с отрицательным значением стажа:\n",
    "days_employed_negative = 0\n",
    "for days in data['days_employed']:\n",
    "    if days < 0:\n",
    "        days_employed_negative += 1\n",
    "print('количество строк с отрицательным значением стажа:', days_employed_negative)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Большая часть значений в столбце 'days_employed' имеют отрицательное значение, при этом среднее арифметическое значение стажа составяет больше 172 лет. Так как данные в столбце некорректные, работать с ними не представляется возможным, а в задании не стоит цели проанализировать стаж, заменим пропуски на 0, а в дальнейшем переведем значения в целочисленные."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['days_employed'] = data['days_employed'].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Среднее арифметическое значение ежемесячного дохода: 167422.30220817294\n",
      "Медианное значение ежемесячного дохода: 145017.93753253992\n"
     ]
    }
   ],
   "source": [
    "#Изучим подробнее столбец 'total_income'\n",
    "print('Среднее арифметическое значение ежемесячного дохода:', data['total_income'].mean())\n",
    "print('Медианное значение ежемесячного дохода:', data['total_income'].median())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разница между средним арифметическим значением дохода и его медианным значением небольшая, но для большей репрезентативности заполним пропуски медианным значением."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['total_income'] = data['total_income'].fillna(data['total_income'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['сотрудник', 'пенсионер', 'компаньон', 'госслужащий',\n",
       "       'безработный', 'предприниматель', 'студент', 'в декрете'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.income_type.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21525 entries, 0 to 21524\n",
      "Data columns (total 12 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   children          21525 non-null  int64  \n",
      " 1   days_employed     21525 non-null  float64\n",
      " 2   dob_years         21525 non-null  int64  \n",
      " 3   education         21525 non-null  object \n",
      " 4   education_id      21525 non-null  int64  \n",
      " 5   family_status     21525 non-null  object \n",
      " 6   family_status_id  21525 non-null  int64  \n",
      " 7   gender            21525 non-null  object \n",
      " 8   income_type       21525 non-null  object \n",
      " 9   debt              21525 non-null  int64  \n",
      " 10  total_income      21525 non-null  float64\n",
      " 11  purpose           21525 non-null  object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "#Проверим результат замены пропусков\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В исходной таблице пропуски были в столбце со стажем и столбце с ежемесячным доходом. Пропуски в стаже были заменены на 0 ввиду некорректности данных. Пропуски в ежемесячном доходе заменены на медианное значение дохода."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Замена типа данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21525 entries, 0 to 21524\n",
      "Data columns (total 12 columns):\n",
      " #   Column            Non-Null Count  Dtype \n",
      "---  ------            --------------  ----- \n",
      " 0   children          21525 non-null  int64 \n",
      " 1   days_employed     21525 non-null  int64 \n",
      " 2   dob_years         21525 non-null  int64 \n",
      " 3   education         21525 non-null  object\n",
      " 4   education_id      21525 non-null  int64 \n",
      " 5   family_status     21525 non-null  object\n",
      " 6   family_status_id  21525 non-null  int64 \n",
      " 7   gender            21525 non-null  object\n",
      " 8   income_type       21525 non-null  object\n",
      " 9   debt              21525 non-null  int64 \n",
      " 10  total_income      21525 non-null  int64 \n",
      " 11  purpose           21525 non-null  object\n",
      "dtypes: int64(7), object(5)\n",
      "memory usage: 2.0+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-8437</td>\n",
       "      <td>42</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>253875</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-4024</td>\n",
       "      <td>36</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>112080</td>\n",
       "      <td>приобретение автомобиля</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>-5623</td>\n",
       "      <td>33</td>\n",
       "      <td>Среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>145885</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>-4124</td>\n",
       "      <td>32</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>267628</td>\n",
       "      <td>дополнительное образование</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>340266</td>\n",
       "      <td>53</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>пенсионер</td>\n",
       "      <td>0</td>\n",
       "      <td>158616</td>\n",
       "      <td>сыграть свадьбу</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years education  education_id  \\\n",
       "0         1          -8437         42    высшее             0   \n",
       "1         1          -4024         36   среднее             1   \n",
       "2         0          -5623         33   Среднее             1   \n",
       "3         3          -4124         32   среднее             1   \n",
       "4         0         340266         53   среднее             1   \n",
       "\n",
       "      family_status  family_status_id gender income_type  debt  total_income  \\\n",
       "0   женат / замужем                 0      F   сотрудник     0        253875   \n",
       "1   женат / замужем                 0      F   сотрудник     0        112080   \n",
       "2   женат / замужем                 0      M   сотрудник     0        145885   \n",
       "3   женат / замужем                 0      M   сотрудник     0        267628   \n",
       "4  гражданский брак                 1      F   пенсионер     0        158616   \n",
       "\n",
       "                      purpose  \n",
       "0               покупка жилья  \n",
       "1     приобретение автомобиля  \n",
       "2               покупка жилья  \n",
       "3  дополнительное образование  \n",
       "4             сыграть свадьбу  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Заменяем длинные дроби в столбцах 'days_employed' и 'total_income' на целочисленные значения\n",
    "data['days_employed'] = data['days_employed'].astype(int)\n",
    "data['total_income'] = data['total_income'].astype(int)\n",
    "#Проверим результат\n",
    "display(data.info())\n",
    "display(data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Значения в столбцах 'days_employed' и 'total_income' были заменены на целочисленные значения"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка дубликатов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дубликаты могут быть в столбцах 'education', 'family_status', 'income_type' и 'purpose'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поиск и обработка дубликатов в столбце 'education'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "среднее                13750\n",
       "высшее                  4718\n",
       "СРЕДНЕЕ                  772\n",
       "Среднее                  711\n",
       "неоконченное высшее      668\n",
       "ВЫСШЕЕ                   274\n",
       "Высшее                   268\n",
       "начальное                250\n",
       "Неоконченное высшее       47\n",
       "НЕОКОНЧЕННОЕ ВЫСШЕЕ       29\n",
       "НАЧАЛЬНОЕ                 17\n",
       "Начальное                 15\n",
       "ученая степень             4\n",
       "Ученая степень             1\n",
       "УЧЕНАЯ СТЕПЕНЬ             1\n",
       "Name: education, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Найдем уникальные значения столбца\n",
    "data['education'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "среднее                15233\n",
       "высшее                  5260\n",
       "неоконченное высшее      744\n",
       "начальное                282\n",
       "ученая степень             6\n",
       "Name: education, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Приведем все значения к нижнему регистру и проверим результат\n",
    "data['education'] = data['education'].str.lower()\n",
    "data['education'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дубликаты удалены"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поиск и обработка дубликатов в столбце 'family_status'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "женат / замужем          12380\n",
       "гражданский брак          4177\n",
       "Не женат / не замужем     2813\n",
       "в разводе                 1195\n",
       "вдовец / вдова             960\n",
       "Name: family_status, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Найдем уникальные значения столбца\n",
    "data['family_status'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дубликаты отсутствуют"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поиск и обработка дубликатов в столбце 'income_type'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "сотрудник          11119\n",
       "компаньон           5085\n",
       "пенсионер           3856\n",
       "госслужащий         1459\n",
       "безработный            2\n",
       "предприниматель        2\n",
       "студент                1\n",
       "в декрете              1\n",
       "Name: income_type, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Найдем уникальные значения столбца\n",
    "data['income_type'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дубликаты отсутствуют"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поиск и обработка дубликатов в столбце 'purpose'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "свадьба                                   797\n",
       "на проведение свадьбы                     777\n",
       "сыграть свадьбу                           774\n",
       "операции с недвижимостью                  676\n",
       "покупка коммерческой недвижимости         664\n",
       "операции с жильем                         653\n",
       "покупка жилья для сдачи                   653\n",
       "операции с коммерческой недвижимостью     651\n",
       "жилье                                     647\n",
       "покупка жилья                             647\n",
       "покупка жилья для семьи                   641\n",
       "строительство собственной недвижимости    635\n",
       "недвижимость                              634\n",
       "операции со своей недвижимостью           630\n",
       "строительство жилой недвижимости          626\n",
       "покупка недвижимости                      624\n",
       "строительство недвижимости                620\n",
       "покупка своего жилья                      620\n",
       "ремонт жилью                              612\n",
       "покупка жилой недвижимости                607\n",
       "на покупку своего автомобиля              505\n",
       "заняться высшим образованием              496\n",
       "автомобиль                                495\n",
       "сделка с подержанным автомобилем          489\n",
       "свой автомобиль                           480\n",
       "на покупку подержанного автомобиля        479\n",
       "автомобили                                478\n",
       "на покупку автомобиля                     472\n",
       "приобретение автомобиля                   462\n",
       "дополнительное образование                462\n",
       "сделка с автомобилем                      455\n",
       "высшее образование                        453\n",
       "получение дополнительного образования     447\n",
       "образование                               447\n",
       "получение образования                     443\n",
       "профильное образование                    436\n",
       "получение высшего образования             426\n",
       "заняться образованием                     412\n",
       "Name: purpose, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Найдем уникальные значения столбца\n",
    "data['purpose'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В столбце с целью получения кредита много по-разному сформулированных целей с одинаковым смыслом. Этот столбец лучше в дальнейшем категоризировать."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь проверим датафрейм на наличие полных дубликатов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "71"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обнаружена 71 строка с полностью повторяющимися данными. Учитывая то, как много разнообразных данных в каждом столбце, вероятность того, что это совпадение, крайне мала. Скорее всего, в таблице вследствие какой-то ошибки продублировались некоторые строки. Разумнее всего будет удалить их."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.drop_duplicates().reset_index(drop=True) \n",
    "#Проверим результат\n",
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Успешно удалили дубликаты в солбце с образованием и полные дубликаты в самом датафрейме. Столбец с целью кредита требует категоризации."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Лемматизация"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "      <th>purpose_lemmas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-8437</td>\n",
       "      <td>42</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>253875</td>\n",
       "      <td>покупка жилья</td>\n",
       "      <td>покупка   жилье \\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-4024</td>\n",
       "      <td>36</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>112080</td>\n",
       "      <td>приобретение автомобиля</td>\n",
       "      <td>приобретение   автомобиль \\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>-5623</td>\n",
       "      <td>33</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>145885</td>\n",
       "      <td>покупка жилья</td>\n",
       "      <td>покупка   жилье \\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>-4124</td>\n",
       "      <td>32</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>267628</td>\n",
       "      <td>дополнительное образование</td>\n",
       "      <td>дополнительный   образование \\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>340266</td>\n",
       "      <td>53</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>пенсионер</td>\n",
       "      <td>0</td>\n",
       "      <td>158616</td>\n",
       "      <td>сыграть свадьбу</td>\n",
       "      <td>сыграть   свадьба \\n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years education  education_id  \\\n",
       "0         1          -8437         42    высшее             0   \n",
       "1         1          -4024         36   среднее             1   \n",
       "2         0          -5623         33   среднее             1   \n",
       "3         3          -4124         32   среднее             1   \n",
       "4         0         340266         53   среднее             1   \n",
       "\n",
       "      family_status  family_status_id gender income_type  debt  total_income  \\\n",
       "0   женат / замужем                 0      F   сотрудник     0        253875   \n",
       "1   женат / замужем                 0      F   сотрудник     0        112080   \n",
       "2   женат / замужем                 0      M   сотрудник     0        145885   \n",
       "3   женат / замужем                 0      M   сотрудник     0        267628   \n",
       "4  гражданский брак                 1      F   пенсионер     0        158616   \n",
       "\n",
       "                      purpose                   purpose_lemmas  \n",
       "0               покупка жилья               покупка   жилье \\n  \n",
       "1     приобретение автомобиля     приобретение   автомобиль \\n  \n",
       "2               покупка жилья               покупка   жилье \\n  \n",
       "3  дополнительное образование  дополнительный   образование \\n  \n",
       "4             сыграть свадьбу             сыграть   свадьба \\n  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Добавим столбец с леммами целей кредита к каждой строке\n",
    "m = Mystem()\n",
    "def add_lemmas(row):\n",
    "    lemma = ' '.join(m.lemmatize(row['purpose']))\n",
    "    return lemma\n",
    "data['purpose_lemmas'] = data.apply(add_lemmas, axis=1)\n",
    "#Проверка результата\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "К латафрейму добавлен столбец с леммами целей получения кредита, который понадобится при категоризации данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Категоризация данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "автомобиль \\n                                    972\n",
       "свадьба \\n                                       791\n",
       "на   проведение   свадьба \\n                     768\n",
       "сыграть   свадьба \\n                             765\n",
       "операция   с   недвижимость \\n                   675\n",
       "покупка   коммерческий   недвижимость \\n         661\n",
       "операция   с   жилье \\n                          652\n",
       "покупка   жилье   для   сдача \\n                 651\n",
       "операция   с   коммерческий   недвижимость \\n    650\n",
       "покупка   жилье \\n                               646\n",
       "жилье \\n                                         646\n",
       "покупка   жилье   для   семья \\n                 638\n",
       "строительство   собственный   недвижимость \\n    635\n",
       "недвижимость \\n                                  633\n",
       "операция   со   свой   недвижимость \\n           627\n",
       "строительство   жилой   недвижимость \\n          624\n",
       "покупка   недвижимость \\n                        621\n",
       "покупка   свой   жилье \\n                        620\n",
       "строительство   недвижимость \\n                  619\n",
       "ремонт   жилье \\n                                607\n",
       "покупка   жилой   недвижимость \\n                606\n",
       "на   покупка   свой   автомобиль \\n              505\n",
       "заниматься   высокий   образование \\n            496\n",
       "сделка   с   подержанный   автомобиль \\n         486\n",
       "на   покупка   подержать   автомобиль \\n         478\n",
       "свой   автомобиль \\n                             478\n",
       "на   покупка   автомобиль \\n                     471\n",
       "приобретение   автомобиль \\n                     461\n",
       "дополнительный   образование \\n                  460\n",
       "сделка   с   автомобиль \\n                       455\n",
       "высокий   образование \\n                         452\n",
       "образование \\n                                   447\n",
       "получение   дополнительный   образование \\n      446\n",
       "получение   образование \\n                       442\n",
       "профильный   образование \\n                      436\n",
       "получение   высокий   образование \\n             426\n",
       "заниматься   образование \\n                      408\n",
       "Name: purpose_lemmas, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Выведем уникальные значения столбца с леммами целей\n",
    "data['purpose_lemmas'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Можно выделить следующие категории: автомобиль, свадьба, образование, недвижимость. Строки с леммой \"жилье\" можно включить в категорию \"недвижимость\".\n",
    "Добавим к датафрейму столбец с категорией:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "      <th>purpose_lemmas</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-8437</td>\n",
       "      <td>42</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>253875</td>\n",
       "      <td>покупка жилья</td>\n",
       "      <td>покупка   жилье \\n</td>\n",
       "      <td>недвижимость</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-4024</td>\n",
       "      <td>36</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>112080</td>\n",
       "      <td>приобретение автомобиля</td>\n",
       "      <td>приобретение   автомобиль \\n</td>\n",
       "      <td>автомобиль</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>-5623</td>\n",
       "      <td>33</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>145885</td>\n",
       "      <td>покупка жилья</td>\n",
       "      <td>покупка   жилье \\n</td>\n",
       "      <td>недвижимость</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>-4124</td>\n",
       "      <td>32</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>267628</td>\n",
       "      <td>дополнительное образование</td>\n",
       "      <td>дополнительный   образование \\n</td>\n",
       "      <td>образование</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>340266</td>\n",
       "      <td>53</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>пенсионер</td>\n",
       "      <td>0</td>\n",
       "      <td>158616</td>\n",
       "      <td>сыграть свадьбу</td>\n",
       "      <td>сыграть   свадьба \\n</td>\n",
       "      <td>свадьба</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years education  education_id  \\\n",
       "0         1          -8437         42    высшее             0   \n",
       "1         1          -4024         36   среднее             1   \n",
       "2         0          -5623         33   среднее             1   \n",
       "3         3          -4124         32   среднее             1   \n",
       "4         0         340266         53   среднее             1   \n",
       "\n",
       "      family_status  family_status_id gender income_type  debt  total_income  \\\n",
       "0   женат / замужем                 0      F   сотрудник     0        253875   \n",
       "1   женат / замужем                 0      F   сотрудник     0        112080   \n",
       "2   женат / замужем                 0      M   сотрудник     0        145885   \n",
       "3   женат / замужем                 0      M   сотрудник     0        267628   \n",
       "4  гражданский брак                 1      F   пенсионер     0        158616   \n",
       "\n",
       "                      purpose                   purpose_lemmas      category  \n",
       "0               покупка жилья               покупка   жилье \\n  недвижимость  \n",
       "1     приобретение автомобиля     приобретение   автомобиль \\n    автомобиль  \n",
       "2               покупка жилья               покупка   жилье \\n  недвижимость  \n",
       "3  дополнительное образование  дополнительный   образование \\n   образование  \n",
       "4             сыграть свадьбу             сыграть   свадьба \\n       свадьба  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Функция для одной строки\n",
    "def add_category(row):\n",
    "    for word in row['purpose_lemmas'].split():\n",
    "        if word == 'автомобиль':\n",
    "            return 'автомобиль'\n",
    "        if word == 'свадьба':\n",
    "            return 'свадьба'\n",
    "        if word == 'образование':\n",
    "            return 'образование'\n",
    "        if word == 'недвижимость' or word == 'жилье':\n",
    "            return 'недвижимость'\n",
    "#Применим к датафрейму\n",
    "data['category'] = data.apply(add_category, axis=1)    \n",
    "#Проверка результата\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Категоризируем клиентов на тех, у кого есть дети, тех, у кого их нет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Добавление столбца 'child_id', в котором значени 0 означает отсутствие детей, а 1 - их наличие\n",
    "def add_child_id(row):\n",
    "    if row['children'] == 0:\n",
    "        return 0\n",
    "    if row['children'] > 0:\n",
    "        return 1\n",
    "data['child_id'] = data.apply(add_child_id, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Также проверим, не осталось ли у нас строк без категории:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21454 entries, 0 to 21453\n",
      "Data columns (total 15 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   children          21454 non-null  int64  \n",
      " 1   days_employed     21454 non-null  int64  \n",
      " 2   dob_years         21454 non-null  int64  \n",
      " 3   education         21454 non-null  object \n",
      " 4   education_id      21454 non-null  int64  \n",
      " 5   family_status     21454 non-null  object \n",
      " 6   family_status_id  21454 non-null  int64  \n",
      " 7   gender            21454 non-null  object \n",
      " 8   income_type       21454 non-null  object \n",
      " 9   debt              21454 non-null  int64  \n",
      " 10  total_income      21454 non-null  int64  \n",
      " 11  purpose           21454 non-null  object \n",
      " 12  purpose_lemmas    21454 non-null  object \n",
      " 13  category          21454 non-null  object \n",
      " 14  child_id          21407 non-null  float64\n",
      "dtypes: float64(1), int64(7), object(7)\n",
      "memory usage: 2.5+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь обнаружилось 47 строчек, к которым не присвоились значения 'child_id'. Это значит, что в столбце 'children' стоят отрицательные значения. Выведем их на экран."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "291     -1\n",
       "705     -1\n",
       "742     -1\n",
       "800     -1\n",
       "941     -1\n",
       "1363    -1\n",
       "1929    -1\n",
       "2073    -1\n",
       "3812    -1\n",
       "4198    -1\n",
       "4399    -1\n",
       "4539    -1\n",
       "5268    -1\n",
       "6008    -1\n",
       "6379    -1\n",
       "7184    -1\n",
       "7272    -1\n",
       "7609    -1\n",
       "7679    -1\n",
       "8220    -1\n",
       "8242    -1\n",
       "8552    -1\n",
       "9553    -1\n",
       "9562    -1\n",
       "10162   -1\n",
       "10350   -1\n",
       "10900   -1\n",
       "11090   -1\n",
       "11249   -1\n",
       "11598   -1\n",
       "12284   -1\n",
       "13760   -1\n",
       "14328   -1\n",
       "15114   -1\n",
       "15400   -1\n",
       "16093   -1\n",
       "16227   -1\n",
       "17054   -1\n",
       "17386   -1\n",
       "17614   -1\n",
       "18174   -1\n",
       "19048   -1\n",
       "19311   -1\n",
       "19360   -1\n",
       "20328   -1\n",
       "20650   -1\n",
       "21071   -1\n",
       "Name: children, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.loc[data['children'] < 0]['children']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сложно предположить, чем вызвана такая ошибка - у этих клиентов отсутствуют дети или в следствие технической ошибки добавился знак \"-\". Для таких значений добавим категорию 2 в столбце 'child_id', которая будет обозначать некорректные значения, чтобы исключить их из анализа."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21454 entries, 0 to 21453\n",
      "Data columns (total 15 columns):\n",
      " #   Column            Non-Null Count  Dtype \n",
      "---  ------            --------------  ----- \n",
      " 0   children          21454 non-null  int64 \n",
      " 1   days_employed     21454 non-null  int64 \n",
      " 2   dob_years         21454 non-null  int64 \n",
      " 3   education         21454 non-null  object\n",
      " 4   education_id      21454 non-null  int64 \n",
      " 5   family_status     21454 non-null  object\n",
      " 6   family_status_id  21454 non-null  int64 \n",
      " 7   gender            21454 non-null  object\n",
      " 8   income_type       21454 non-null  object\n",
      " 9   debt              21454 non-null  int64 \n",
      " 10  total_income      21454 non-null  int64 \n",
      " 11  purpose           21454 non-null  object\n",
      " 12  purpose_lemmas    21454 non-null  object\n",
      " 13  category          21454 non-null  object\n",
      " 14  child_id          21454 non-null  int64 \n",
      "dtypes: int64(8), object(7)\n",
      "memory usage: 2.5+ MB\n"
     ]
    }
   ],
   "source": [
    "#Обновленный код для добавления столбца 'child_id' с категорией нерепрезентативных значений\n",
    "def add_child_id(row):\n",
    "    if row['children'] == 0:\n",
    "        return 0\n",
    "    if row['children'] > 0:\n",
    "        return 1\n",
    "    if row['children'] < 0:\n",
    "        return 2\n",
    "    \n",
    "data['child_id'] = data.apply(add_child_id, axis=1)\n",
    "\n",
    "#Сразу проверим результат\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В датафрейм добавлен столбец с категориями по целям получения кредита (автомобиль, свадьба, образование, недвижимость)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 3. Исследование данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Зависимость между наличием детей и возвратом кредита в срок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Доля должников среди клиентов, имеющих детей, составляет 9.2%\n",
      "Доля должников среди клиентов, не имеющих детей, составляет 7.5%\n"
     ]
    }
   ],
   "source": [
    "#Сравним долю должников среди клиентов, имеющих детей и долю должников среди бездетных клиентов\n",
    "#Количество должников с детьми:\n",
    "debt_child = data.loc[(data['children'] != 0) & (data['debt'] == 1)]['children'].count()\n",
    "#Количество клиентов с детьми:\n",
    "clients_child = data.loc[data['children'] != 0]['children'].count()\n",
    "#Доля должников среди клиентов, имеющих детей:\n",
    "debt_child_share = debt_child / clients_child\n",
    "\n",
    "#Количество должников без детей:\n",
    "debt_childfree = data.loc[(data['children'] == 0) & (data['debt'] == 1)]['children'].count()\n",
    "#Количество клиентов без детей:\n",
    "clients_childfree = data.loc[data['children'] == 0]['children'].count()\n",
    "#Доля должников среди клиентов, не имеющих детей:\n",
    "debt_childfree_share = debt_childfree / clients_childfree\n",
    "\n",
    "#Выведем результаты для сравнения:\n",
    "print('Доля должников среди клиентов, имеющих детей, составляет {:.1%}'.format(debt_child_share))\n",
    "print('Доля должников среди клиентов, не имеющих детей, составляет {:.1%}'.format(debt_childfree_share))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Доля должников среди клиентов, имеющи детей, на 23% выше, чем среди клиентов, не имеющих детей. Разница существенная, поэтому можно говорить о том, что имеется зависимость между наличием детей и возвратом кредита в срок."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>debt</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>child_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13028</td>\n",
       "      <td>1063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6639</td>\n",
       "      <td>677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "debt          0     1\n",
       "child_id             \n",
       "0         13028  1063\n",
       "1          6639   677\n",
       "2            46     1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Создадим сводную таблицу с группировкой по наличию/отсутствию детей\n",
    "data_pivot = data.pivot_table(index='child_id', columns='debt', values='children', aggfunc='count')\n",
    "display(data_pivot)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для большей наглядности переименуем столбцы и строки, удалим строку с некорректными данными и добавим столбец с долей должников"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Не имел задолженность</th>\n",
       "      <th>Имел задолженность</th>\n",
       "      <th>Доля должников, %</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Не имеет детей</th>\n",
       "      <td>13028</td>\n",
       "      <td>1063</td>\n",
       "      <td>7.543822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Есть дети</th>\n",
       "      <td>6639</td>\n",
       "      <td>677</td>\n",
       "      <td>9.253691</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Не имел задолженность  Имел задолженность  Доля должников, %\n",
       "Не имеет детей                  13028                1063           7.543822\n",
       "Есть дети                        6639                 677           9.253691"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_pivot.drop(data_pivot.index[[2]], inplace=True)\n",
    "data_pivot.columns = ['Не имел задолженность', 'Имел задолженность']\n",
    "data_pivot.index = ['Не имеет детей', 'Есть дети']\n",
    "data_pivot['Доля должников, %'] = 100*data_pivot['Имел задолженность'] / (data_pivot['Не имел задолженность'] + data_pivot['Имел задолженность'])\n",
    "\n",
    "data_pivot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создали сводную таблицу с группировкой по наличию/отсутствию детей и определили долю должников по каждой группе. Результат получился точно такой же, как и при анализе без группировки данных - доля должников среди клиентов, имеющих детей, на 23% выше, чем среди клиентов, не имеющих детей."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "      <th>purpose_lemmas</th>\n",
       "      <th>category</th>\n",
       "      <th>child_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-8437</td>\n",
       "      <td>42</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>253875</td>\n",
       "      <td>покупка жилья</td>\n",
       "      <td>покупка   жилье \\n</td>\n",
       "      <td>недвижимость</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-4024</td>\n",
       "      <td>36</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>112080</td>\n",
       "      <td>приобретение автомобиля</td>\n",
       "      <td>приобретение   автомобиль \\n</td>\n",
       "      <td>автомобиль</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>-5623</td>\n",
       "      <td>33</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>145885</td>\n",
       "      <td>покупка жилья</td>\n",
       "      <td>покупка   жилье \\n</td>\n",
       "      <td>недвижимость</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>-4124</td>\n",
       "      <td>32</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>267628</td>\n",
       "      <td>дополнительное образование</td>\n",
       "      <td>дополнительный   образование \\n</td>\n",
       "      <td>образование</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>340266</td>\n",
       "      <td>53</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>пенсионер</td>\n",
       "      <td>0</td>\n",
       "      <td>158616</td>\n",
       "      <td>сыграть свадьбу</td>\n",
       "      <td>сыграть   свадьба \\n</td>\n",
       "      <td>свадьба</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years education  education_id  \\\n",
       "0         1          -8437         42    высшее             0   \n",
       "1         1          -4024         36   среднее             1   \n",
       "2         0          -5623         33   среднее             1   \n",
       "3         3          -4124         32   среднее             1   \n",
       "4         0         340266         53   среднее             1   \n",
       "\n",
       "      family_status  family_status_id gender income_type  debt  total_income  \\\n",
       "0   женат / замужем                 0      F   сотрудник     0        253875   \n",
       "1   женат / замужем                 0      F   сотрудник     0        112080   \n",
       "2   женат / замужем                 0      M   сотрудник     0        145885   \n",
       "3   женат / замужем                 0      M   сотрудник     0        267628   \n",
       "4  гражданский брак                 1      F   пенсионер     0        158616   \n",
       "\n",
       "                      purpose                   purpose_lemmas      category  \\\n",
       "0               покупка жилья               покупка   жилье \\n  недвижимость   \n",
       "1     приобретение автомобиля     приобретение   автомобиль \\n    автомобиль   \n",
       "2               покупка жилья               покупка   жилье \\n  недвижимость   \n",
       "3  дополнительное образование  дополнительный   образование \\n   образование   \n",
       "4             сыграть свадьбу             сыграть   свадьба \\n       свадьба   \n",
       "\n",
       "   child_id  \n",
       "0         1  \n",
       "1         1  \n",
       "2         0  \n",
       "3         1  \n",
       "4         0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_a7b45_\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >count</th>        <th class=\"col_heading level0 col1\" >mean</th>    </tr>    <tr>        <th class=\"blank level1\" ></th>        <th class=\"col_heading level1 col0\" >debt</th>        <th class=\"col_heading level1 col1\" >debt</th>    </tr>    <tr>        <th class=\"index_name level0\" >child_id</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a7b45_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "                        <td id=\"T_a7b45_row0_col0\" class=\"data row0 col0\" >14091</td>\n",
       "                        <td id=\"T_a7b45_row0_col1\" class=\"data row0 col1\" >7.54%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a7b45_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "                        <td id=\"T_a7b45_row1_col0\" class=\"data row1 col0\" >7316</td>\n",
       "                        <td id=\"T_a7b45_row1_col1\" class=\"data row1 col1\" >9.25%</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a7b45_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "                        <td id=\"T_a7b45_row2_col0\" class=\"data row2 col0\" >47</td>\n",
       "                        <td id=\"T_a7b45_row2_col1\" class=\"data row2 col1\" >2.13%</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f12336fdf70>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "display(data.head())\n",
    "data_pivot1 = data.pivot_table(index='child_id', values='debt', aggfunc=['count', 'mean']).style.format({('mean', 'debt'): '{:.2%}'})\n",
    "data_pivot1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Зависимость между семейным положением и возвратом кредита в срок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>вдовец / вдова</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>в разводе</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Не женат / не замужем</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           family_status  family_status_id\n",
       "0        женат / замужем                 0\n",
       "1       гражданский брак                 1\n",
       "2         вдовец / вдова                 2\n",
       "3              в разводе                 3\n",
       "4  Не женат / не замужем                 4"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Сравним долю должников среди клиентов разного семейного положения\n",
    "#Для начала выведем словарь с соотношением семейного статуса и его id\n",
    "status_dict = data[['family_status', 'family_status_id']].drop_duplicates().reset_index(drop=True)\n",
    "status_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Доля должников среди клиентов в статусе женат / замужем: 7.5%\n",
      "Доля должников среди клиентов в статусе гражданский брак: 9.3%\n",
      "Доля должников среди клиентов в статусе вдовец / вдова: 6.6%\n",
      "Доля должников среди клиентов в статусе в разводе: 7.1%\n",
      "Доля должников среди клиентов в статусе Не женат / не замужем: 9.8%\n"
     ]
    }
   ],
   "source": [
    "#Количество должников в статусе женат / замужем:\n",
    "debt_married = data.loc[(data['family_status_id'] == 0) & (data['debt'] == 1)]['family_status_id'].count()\n",
    "#Количество клиентов в статусе женат / замужем:\n",
    "clients_married = data.loc[data['family_status_id'] == 0]['family_status_id'].count()\n",
    "#Доля должников среди клиентов в статусе женат / замужем:\n",
    "debt_married_share = debt_married / clients_married\n",
    "\n",
    "#Количество должников в статусе гражданский брак:\n",
    "debt_married_civ = data.loc[(data['family_status_id'] == 1) & (data['debt'] == 1)]['family_status_id'].count()\n",
    "#Количество клиентов в статусе гражданский брак:\n",
    "clients_married_civ = data.loc[data['family_status_id'] == 1]['family_status_id'].count()\n",
    "#Доля должников среди клиентов в статусе гражданский брак:\n",
    "debt_married_civ_share = debt_married_civ / clients_married_civ\n",
    "\n",
    "#Количество должников в статусе вдовец / вдова:\n",
    "debt_widow = data.loc[(data['family_status_id'] == 2) & (data['debt'] == 1)]['family_status_id'].count()\n",
    "#Количество клиентов в статусе вдовец / вдова:\n",
    "clients_widow = data.loc[data['family_status_id'] == 2]['family_status_id'].count()\n",
    "#Доля должников среди клиентов в статусе вдовец / вдова:\n",
    "debt_widow_share = debt_widow / clients_widow\n",
    "\n",
    "#Количество должников в статусе в разводе:\n",
    "debt_divorced = data.loc[(data['family_status_id'] == 3) & (data['debt'] == 1)]['family_status_id'].count()\n",
    "#Количество клиентов в статусе в разводе:\n",
    "clients_divorced = data.loc[data['family_status_id'] == 3]['family_status_id'].count()\n",
    "#Доля должников среди клиентов в статусе в разводе:\n",
    "debt_divorced_share = debt_divorced / clients_divorced\n",
    "\n",
    "#Количество должников в статусе Не женат / не замужем:\n",
    "debt_single = data.loc[(data['family_status_id'] == 4) & (data['debt'] == 1)]['family_status_id'].count()\n",
    "#Количество клиентов в статусе Не женат / не замужем:\n",
    "clients_single = data.loc[data['family_status_id'] == 4]['family_status_id'].count()\n",
    "#Доля должников среди клиентов в статусе Не женат / не замужем:\n",
    "debt_single_share = debt_single / clients_single\n",
    "\n",
    "#Выведем результаты для сравнения:\n",
    "print('Доля должников среди клиентов в статусе женат / замужем: {:.1%}'.format(debt_married_share))\n",
    "print('Доля должников среди клиентов в статусе гражданский брак: {:.1%}'.format(debt_married_civ_share))\n",
    "print('Доля должников среди клиентов в статусе вдовец / вдова: {:.1%}'.format(debt_widow_share))\n",
    "print('Доля должников среди клиентов в статусе в разводе: {:.1%}'.format(debt_divorced_share))\n",
    "print('Доля должников среди клиентов в статусе Не женат / не замужем: {:.1%}'.format(debt_single_share))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Можно отметить, что доля должников среди тех, кто состоит или состоял в официльном браке, ниже, чем среди тех, кто никогда не вступал в брак. Возможно, вступая в официальные отношения, люди становятся ответственнее."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Зависимость между уровнем дохода и возвратом кредита в срок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20667\n",
      "2265604\n"
     ]
    }
   ],
   "source": [
    "#Сперва нужно категоризировать уровни дохода\n",
    "#Найдем минимальный и максимальный доход, чтобы определить диапазон:\n",
    "print(data['total_income'].min())\n",
    "print(data['total_income'].max())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получили диапазон от 20667 до 2265604, при этом медианный доход 145018, а средний арифметический 167422. Поделим доход на следующие уровни: низкий (менее 100 тыс.), средний (100-200 тыс. включительно) и высокий (более 200 тыс). Категории уровня дохода будут 1, 2 и 3 соответственно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    11925\n",
       "3     5066\n",
       "1     4463\n",
       "Name: income_cat, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Добавим столбец с категорией уровня дохода\n",
    "def add_income_cat(row):\n",
    "    if row['total_income'] < 100000:\n",
    "        return 1\n",
    "    if 100000 <= row['total_income'] <= 200000:\n",
    "        return 2\n",
    "    if row['total_income'] > 200000:\n",
    "        return 3\n",
    "data['income_cat'] = data.apply(add_income_cat, axis=1)    \n",
    "#Оценим репрезентативность выбранной категории:\n",
    "data['income_cat'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В каждой категории сопоставимое количество клиентов, можно выполнять дальнейший анализ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Доля должников среди клиентов с низким уровнем дохода: 7.9%\n",
      "Доля должников среди клиентов со средним уровнем дохода: 8.6%\n",
      "Доля должников среди клиентов с высоким уровнем дохода: 7.1%\n"
     ]
    }
   ],
   "source": [
    "#Найдем долю должников среди клиентов с разными уровнями дохода\n",
    "#Количество должников с низким уровнем дохода:\n",
    "debt_low_income = data.loc[(data['income_cat'] == 1) & (data['debt'] == 1)]['income_cat'].count()\n",
    "#Количество клиентов с низким уровнем дохода:\n",
    "clients_low_income = data.loc[data['income_cat'] == 1]['income_cat'].count()\n",
    "#Доля должников среди клиентов с низким уровнем дохода:\n",
    "debt_low_income_share = debt_low_income / clients_low_income\n",
    "\n",
    "#Количество должников со средним уровнем дохода:\n",
    "debt_mid_income = data.loc[(data['income_cat'] == 2) & (data['debt'] == 1)]['income_cat'].count()\n",
    "#Количество клиентов со средним уровнем дохода:\n",
    "clients_mid_income = data.loc[data['income_cat'] == 2]['income_cat'].count()\n",
    "#Доля должников среди клиентов со средним уровнем дохода:\n",
    "debt_mid_income_share = debt_mid_income / clients_mid_income\n",
    "\n",
    "#Количество должников с высоким уровнем дохода:\n",
    "debt_high_income = data.loc[(data['income_cat'] == 3) & (data['debt'] == 1)]['income_cat'].count()\n",
    "#Количество клиентов с высоким уровнем дохода:\n",
    "clients_high_income = data.loc[data['income_cat'] == 3]['income_cat'].count()\n",
    "#Доля должников среди клиентов с высоким уровнем дохода:\n",
    "debt_high_income_share = debt_high_income / clients_high_income\n",
    "\n",
    "#Выведем результаты для сравнения:\n",
    "print('Доля должников среди клиентов с низким уровнем дохода: {:.1%}'.format(debt_low_income_share))\n",
    "print('Доля должников среди клиентов со средним уровнем дохода: {:.1%}'.format(debt_mid_income_share))\n",
    "print('Доля должников среди клиентов с высоким уровнем дохода: {:.1%}'.format(debt_high_income_share))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Корреляцию уровня дохода и возврата кредита в срок моржно считать несущественной."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Влияние цели кредита на его возврат в срок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Доля должников среди клиентов, взявших кредит на покупку автомобиля: 9.4%\n",
      "Доля должников среди клиентов, взявших кредит на свадьбу: 8.0%\n",
      "Доля должников среди клиентов, взявших кредит на образование: 9.2%\n",
      "Доля должников среди клиентов, взявших кредит на недвижимость: 7.2%\n"
     ]
    }
   ],
   "source": [
    "#Найдем долю должников среди клиентов с разными целями кредита:\n",
    "#Количество должников, взявших кредит на покупку автомобиля:\n",
    "debt_car = data.loc[(data['category'] == 'автомобиль') & (data['debt'] == 1)]['category'].count()\n",
    "#Количество клиентов, взявших кредит на покупку автомобиля:\n",
    "clients_car = data.loc[data['category'] == 'автомобиль']['category'].count()\n",
    "#Доля должников среди клиентов, взявших кредит на покупку автомобиля:\n",
    "debt_car_share = debt_car / clients_car\n",
    "\n",
    "#Количество должников, взявших кредит на свадьбу:\n",
    "debt_wedding = data.loc[(data['category'] == 'свадьба') & (data['debt'] == 1)]['category'].count()\n",
    "#Количество клиентов, взявших кредит на свадьбу:\n",
    "clients_wedding = data.loc[data['category'] == 'свадьба']['category'].count()\n",
    "#Доля должников среди клиентов, взявших кредит на свадьбу:\n",
    "debt_wedding_share = debt_wedding / clients_wedding\n",
    "\n",
    "#Количество должников, взявших кредит на образование:\n",
    "debt_education = data.loc[(data['category'] == 'образование') & (data['debt'] == 1)]['category'].count()\n",
    "#Количество клиентов, взявших кредит на образование:\n",
    "clients_education = data.loc[data['category'] == 'образование']['category'].count()\n",
    "#Доля должников среди клиентов, взявших кредит на образование:\n",
    "debt_education_share = debt_education / clients_education\n",
    "\n",
    "#Количество должников, взявших кредит на недвижимость:\n",
    "debt_real_estate = data.loc[(data['category'] == 'недвижимость') & (data['debt'] == 1)]['category'].count()\n",
    "#Количество клиентов, взявших кредит на недвижимость:\n",
    "clients_real_estate = data.loc[data['category'] == 'недвижимость']['category'].count()\n",
    "#Доля должников среди клиентов, взявших кредит на недвижимость:\n",
    "debt_real_estate_share = debt_real_estate / clients_real_estate\n",
    "\n",
    "#Выведем результаты для сравнения:\n",
    "print('Доля должников среди клиентов, взявших кредит на покупку автомобиля: {:.1%}'.format(debt_car_share))\n",
    "print('Доля должников среди клиентов, взявших кредит на свадьбу: {:.1%}'.format(debt_wedding_share))\n",
    "print('Доля должников среди клиентов, взявших кредит на образование: {:.1%}'.format(debt_education_share))\n",
    "print('Доля должников среди клиентов, взявших кредит на недвижимость: {:.1%}'.format(debt_real_estate_share))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Можно отметить, что наиболеее высокая доля должников среди клиентов, взявших кредит на покупку автомобиля и на образование. Среди клиентов, взявших кредит на недвижимость, доля должников минимальная."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 4. Общий вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В ходе работы был обработан датафрейм с данными о клиентах банка: удалены пропуски и дубликаты, для численных значений выбран наиболее оптимальный формат, лемматизированы и категоризированы цели получения кредита.\n",
    "При анализе зависимостей даны ответы поставленные вопросы:\n",
    "\n",
    "*Есть ли зависимость между наличием детей и возвратом кредита в срок?*\n",
    "\n",
    "Доля должников среди клиентов, имеющи детей, на 23% выше, чем среди клиентов, не имеющих детей. Разница существенная, поэтому можно говорить о том, что имеется зависимость между наличием детей и возвратом кредита в срок.\n",
    "\n",
    "*Есть ли зависимость между семейным положением и возвратом кредита в срок?*\n",
    "\n",
    "Можно отметить, что доля должников среди тех, кто состоит или состоял в официльном браке, ниже, чем среди тех, кто никогда не вступал в брак. Возможно, вступая в официальные отношения, люди становятся ответственнее.\n",
    "\n",
    "*Есть ли зависимость между уровнем дохода и возвратом кредита в срок?*\n",
    "\n",
    "Корреляцию уровня дохода и возврата кредита в срок моржно считать несущественной.\n",
    "\n",
    "*Как разные цели кредита влияют на его возврат в срок?*\n",
    "\n",
    "Можно отметить, что наиболеее высокая доля должников среди клиентов, взявших кредит на покупку автомобиля и на образование. Среди клиентов, взявших кредит на недвижимость, доля должников минимальная."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 671,
    "start_time": "2021-09-18T08:07:02.148Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-18T08:33:46.612Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-18T08:33:55.200Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-18T08:34:32.319Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-18T08:47:52.437Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-18T08:48:44.689Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-18T08:51:15.397Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-18T08:51:25.597Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-18T08:55:59.316Z"
   },
   {
    "duration": 146,
    "start_time": "2021-09-18T08:57:36.110Z"
   },
   {
    "duration": 7014,
    "start_time": "2021-09-18T08:57:40.809Z"
   },
   {
    "duration": 6637,
    "start_time": "2021-09-18T08:58:52.411Z"
   },
   {
    "duration": 64,
    "start_time": "2021-09-18T08:59:11.173Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-18T08:59:11.240Z"
   },
   {
    "duration": 151,
    "start_time": "2021-09-18T08:59:49.742Z"
   },
   {
    "duration": 152,
    "start_time": "2021-09-18T08:59:49.743Z"
   },
   {
    "duration": 64,
    "start_time": "2021-09-18T08:59:59.474Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-18T08:59:59.540Z"
   },
   {
    "duration": 6697,
    "start_time": "2021-09-18T09:00:34.028Z"
   },
   {
    "duration": 61,
    "start_time": "2021-09-18T09:00:52.564Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-18T09:00:52.627Z"
   },
   {
    "duration": 93,
    "start_time": "2021-09-18T09:01:29.671Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-18T09:01:29.766Z"
   },
   {
    "duration": 69,
    "start_time": "2021-09-18T09:04:16.906Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-18T09:04:16.977Z"
   },
   {
    "duration": 248,
    "start_time": "2021-09-18T09:04:16.998Z"
   },
   {
    "duration": 1433,
    "start_time": "2021-09-19T05:27:00.866Z"
   },
   {
    "duration": 69,
    "start_time": "2021-09-19T05:28:25.017Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T05:28:25.089Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T05:30:38.047Z"
   },
   {
    "duration": 77,
    "start_time": "2021-09-19T05:33:24.896Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T05:33:45.897Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-19T05:39:18.342Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T05:40:36.398Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-19T05:41:07.008Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-19T05:43:48.140Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T05:44:46.552Z"
   },
   {
    "duration": 70,
    "start_time": "2021-09-19T05:47:12.945Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T05:47:13.017Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-19T05:47:13.034Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-19T05:47:13.066Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T05:47:13.072Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-19T05:47:13.087Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T05:47:13.100Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-19T06:08:30.767Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T06:08:56.810Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-19T06:09:18.602Z"
   },
   {
    "duration": 413,
    "start_time": "2021-09-19T06:13:07.078Z"
   },
   {
    "duration": 66,
    "start_time": "2021-09-19T06:14:53.676Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:14:53.744Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:14:53.762Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-19T06:14:53.778Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-19T06:14:53.785Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-19T06:14:53.798Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T06:14:53.807Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T06:14:53.862Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T06:19:21.997Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-19T06:20:29.669Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T06:21:26.429Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T06:26:07.524Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T06:27:10.471Z"
   },
   {
    "duration": 73,
    "start_time": "2021-09-19T06:30:03.982Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:30:04.057Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:30:04.074Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-19T06:30:04.091Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T06:30:04.097Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T06:30:04.111Z"
   },
   {
    "duration": 52,
    "start_time": "2021-09-19T06:30:04.122Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-19T06:30:04.177Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T06:30:04.206Z"
   },
   {
    "duration": 58,
    "start_time": "2021-09-19T06:30:04.216Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T06:30:04.276Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-19T06:30:04.291Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T06:30:04.311Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-19T06:31:51.835Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-19T06:32:11.171Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T06:34:39.262Z"
   },
   {
    "duration": 381,
    "start_time": "2021-09-19T06:40:02.160Z"
   },
   {
    "duration": 68,
    "start_time": "2021-09-19T06:40:55.134Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:40:55.205Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:40:55.222Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-19T06:40:55.238Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-19T06:40:55.266Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-19T06:40:55.278Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T06:40:55.287Z"
   },
   {
    "duration": 62,
    "start_time": "2021-09-19T06:40:55.305Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T06:40:55.371Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T06:40:55.382Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-19T06:40:55.409Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-19T06:40:55.433Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-19T06:40:55.467Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-19T06:40:55.487Z"
   },
   {
    "duration": 3,
    "start_time": "2021-09-19T06:40:55.516Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T06:42:26.057Z"
   },
   {
    "duration": 67,
    "start_time": "2021-09-19T06:42:32.763Z"
   },
   {
    "duration": 31,
    "start_time": "2021-09-19T06:42:32.832Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T06:42:32.866Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-19T06:42:32.882Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T06:42:32.888Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-19T06:42:32.903Z"
   },
   {
    "duration": 60,
    "start_time": "2021-09-19T06:42:32.911Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T06:42:32.974Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T06:42:33.000Z"
   },
   {
    "duration": 52,
    "start_time": "2021-09-19T06:42:33.010Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T06:42:33.065Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-19T06:42:33.075Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-19T06:42:33.095Z"
   },
   {
    "duration": 33,
    "start_time": "2021-09-19T06:42:33.109Z"
   },
   {
    "duration": 3,
    "start_time": "2021-09-19T06:42:33.162Z"
   },
   {
    "duration": 52,
    "start_time": "2021-09-19T06:42:41.079Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:43:02.576Z"
   },
   {
    "duration": 103,
    "start_time": "2021-09-19T06:55:52.851Z"
   },
   {
    "duration": 306,
    "start_time": "2021-09-19T06:56:07.611Z"
   },
   {
    "duration": 65,
    "start_time": "2021-09-19T06:56:37.319Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:56:37.387Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T06:56:37.404Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-19T06:56:37.421Z"
   },
   {
    "duration": 36,
    "start_time": "2021-09-19T06:56:37.429Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-19T06:56:37.467Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T06:56:37.476Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-19T06:56:37.494Z"
   },
   {
    "duration": 45,
    "start_time": "2021-09-19T06:56:37.520Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T06:56:37.568Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T06:56:37.594Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T06:56:37.608Z"
   },
   {
    "duration": 42,
    "start_time": "2021-09-19T06:56:37.626Z"
   },
   {
    "duration": 28,
    "start_time": "2021-09-19T06:56:37.671Z"
   },
   {
    "duration": 70,
    "start_time": "2021-09-19T06:56:37.702Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-19T06:56:37.775Z"
   },
   {
    "duration": 381,
    "start_time": "2021-09-19T09:01:08.845Z"
   },
   {
    "duration": 5686,
    "start_time": "2021-09-19T09:53:50.510Z"
   },
   {
    "duration": 73,
    "start_time": "2021-09-19T09:55:35.399Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T09:55:35.475Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T09:55:35.496Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T09:55:35.514Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-19T09:55:35.529Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T09:55:35.572Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-19T09:55:35.589Z"
   },
   {
    "duration": 27,
    "start_time": "2021-09-19T09:55:35.670Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T09:55:35.700Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-19T09:55:35.711Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T09:55:35.754Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T09:55:35.770Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-19T09:55:35.786Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-19T09:55:35.808Z"
   },
   {
    "duration": 45,
    "start_time": "2021-09-19T09:55:35.862Z"
   },
   {
    "duration": 5714,
    "start_time": "2021-09-19T09:55:35.910Z"
   },
   {
    "duration": 70,
    "start_time": "2021-09-19T09:56:55.087Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T09:56:55.160Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T09:56:55.177Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-19T09:56:55.194Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-19T09:56:55.202Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-19T09:56:55.221Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-19T09:56:55.230Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T09:56:55.273Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T09:56:55.300Z"
   },
   {
    "duration": 60,
    "start_time": "2021-09-19T09:56:55.311Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T09:56:55.373Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T09:56:55.384Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T09:56:55.400Z"
   },
   {
    "duration": 52,
    "start_time": "2021-09-19T09:56:55.416Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-19T09:56:55.470Z"
   },
   {
    "duration": 5939,
    "start_time": "2021-09-19T09:56:55.512Z"
   },
   {
    "duration": 263,
    "start_time": "2021-09-19T09:59:42.830Z"
   },
   {
    "duration": 331,
    "start_time": "2021-09-19T09:59:52.379Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T10:00:27.872Z"
   },
   {
    "duration": 70,
    "start_time": "2021-09-19T10:03:50.035Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T10:03:50.108Z"
   },
   {
    "duration": 38,
    "start_time": "2021-09-19T10:03:50.126Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-19T10:03:50.167Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-19T10:03:50.174Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T10:03:50.187Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T10:03:50.198Z"
   },
   {
    "duration": 59,
    "start_time": "2021-09-19T10:03:50.215Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T10:03:50.277Z"
   },
   {
    "duration": 31,
    "start_time": "2021-09-19T10:03:50.288Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-19T10:03:50.322Z"
   },
   {
    "duration": 33,
    "start_time": "2021-09-19T10:03:50.331Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-19T10:03:50.367Z"
   },
   {
    "duration": 28,
    "start_time": "2021-09-19T10:03:50.386Z"
   },
   {
    "duration": 67,
    "start_time": "2021-09-19T10:03:50.416Z"
   },
   {
    "duration": 5626,
    "start_time": "2021-09-19T10:03:50.485Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T10:04:58.975Z"
   },
   {
    "duration": 419,
    "start_time": "2021-09-19T10:22:21.246Z"
   },
   {
    "duration": 74,
    "start_time": "2021-09-19T10:23:20.645Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-19T10:23:20.722Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T10:23:20.766Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-19T10:23:20.783Z"
   },
   {
    "duration": 37,
    "start_time": "2021-09-19T10:23:20.796Z"
   },
   {
    "duration": 44,
    "start_time": "2021-09-19T10:23:20.835Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-19T10:23:20.881Z"
   },
   {
    "duration": 36,
    "start_time": "2021-09-19T10:23:20.910Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T10:23:20.950Z"
   },
   {
    "duration": 33,
    "start_time": "2021-09-19T10:23:20.966Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-19T10:23:21.002Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-19T10:23:21.022Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-19T10:23:21.046Z"
   },
   {
    "duration": 35,
    "start_time": "2021-09-19T10:23:21.079Z"
   },
   {
    "duration": 47,
    "start_time": "2021-09-19T10:23:21.116Z"
   },
   {
    "duration": 5819,
    "start_time": "2021-09-19T10:23:21.167Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T10:23:26.989Z"
   },
   {
    "duration": 489,
    "start_time": "2021-09-19T10:23:27.004Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T10:24:23.805Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-19T10:53:44.167Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-19T10:59:35.307Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T10:59:57.830Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T11:00:52.467Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T11:01:17.458Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T11:02:44.530Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T11:05:52.798Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T11:06:04.914Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T11:13:30.616Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T11:17:51.255Z"
   },
   {
    "duration": 268,
    "start_time": "2021-09-19T11:18:06.144Z"
   },
   {
    "duration": 403,
    "start_time": "2021-09-19T11:18:32.313Z"
   },
   {
    "duration": 70,
    "start_time": "2021-09-19T11:18:45.265Z"
   },
   {
    "duration": 27,
    "start_time": "2021-09-19T11:18:45.338Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T11:18:45.368Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-19T11:18:45.394Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T11:18:45.401Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T11:18:45.416Z"
   },
   {
    "duration": 49,
    "start_time": "2021-09-19T11:18:45.426Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-19T11:18:45.479Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T11:18:45.506Z"
   },
   {
    "duration": 59,
    "start_time": "2021-09-19T11:18:45.517Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T11:18:45.578Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T11:18:45.590Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T11:18:45.606Z"
   },
   {
    "duration": 66,
    "start_time": "2021-09-19T11:18:45.621Z"
   },
   {
    "duration": 43,
    "start_time": "2021-09-19T11:18:45.690Z"
   },
   {
    "duration": 5694,
    "start_time": "2021-09-19T11:18:45.736Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T11:18:51.433Z"
   },
   {
    "duration": 531,
    "start_time": "2021-09-19T11:18:51.463Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T11:18:51.997Z"
   },
   {
    "duration": 49,
    "start_time": "2021-09-19T11:18:52.021Z"
   },
   {
    "duration": 277,
    "start_time": "2021-09-19T11:18:52.073Z"
   },
   {
    "duration": 71,
    "start_time": "2021-09-19T11:32:12.694Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T11:32:12.767Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T11:32:12.784Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-19T11:32:12.801Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-19T11:32:12.809Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-19T11:32:12.822Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T11:32:12.864Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-19T11:32:12.881Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T11:32:12.911Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-19T11:32:12.963Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T11:32:12.992Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-19T11:32:13.006Z"
   },
   {
    "duration": 44,
    "start_time": "2021-09-19T11:32:13.019Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-19T11:32:13.065Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-19T11:32:13.108Z"
   },
   {
    "duration": 5863,
    "start_time": "2021-09-19T11:32:13.151Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T11:32:19.017Z"
   },
   {
    "duration": 448,
    "start_time": "2021-09-19T11:32:19.033Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T11:32:19.483Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T11:32:19.506Z"
   },
   {
    "duration": 3,
    "start_time": "2021-09-19T11:32:19.529Z"
   },
   {
    "duration": 70,
    "start_time": "2021-09-19T11:32:25.003Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T11:32:25.075Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T11:32:25.092Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T11:32:25.115Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T11:32:25.131Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-19T11:32:25.157Z"
   },
   {
    "duration": 36,
    "start_time": "2021-09-19T11:32:25.180Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-19T11:32:25.221Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T11:32:25.256Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-19T11:32:25.266Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-19T11:32:25.309Z"
   },
   {
    "duration": 31,
    "start_time": "2021-09-19T11:32:25.337Z"
   },
   {
    "duration": 31,
    "start_time": "2021-09-19T11:32:25.370Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-19T11:32:25.404Z"
   },
   {
    "duration": 45,
    "start_time": "2021-09-19T11:32:25.437Z"
   },
   {
    "duration": 5714,
    "start_time": "2021-09-19T11:32:25.485Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T11:32:31.202Z"
   },
   {
    "duration": 446,
    "start_time": "2021-09-19T11:32:31.216Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-19T11:32:31.665Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-19T11:32:31.690Z"
   },
   {
    "duration": 48,
    "start_time": "2021-09-19T11:32:31.715Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T11:35:45.773Z"
   },
   {
    "duration": 70,
    "start_time": "2021-09-19T11:46:13.589Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T11:46:13.662Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T11:46:13.678Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-19T11:46:13.696Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-19T11:46:13.707Z"
   },
   {
    "duration": 39,
    "start_time": "2021-09-19T11:46:13.727Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-19T11:46:13.769Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-19T11:46:13.788Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-19T11:46:13.815Z"
   },
   {
    "duration": 56,
    "start_time": "2021-09-19T11:46:13.826Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-19T11:46:13.885Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-19T11:46:13.900Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-19T11:46:13.917Z"
   },
   {
    "duration": 47,
    "start_time": "2021-09-19T11:46:13.936Z"
   },
   {
    "duration": 42,
    "start_time": "2021-09-19T11:46:13.985Z"
   },
   {
    "duration": 6220,
    "start_time": "2021-09-19T11:46:14.029Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-19T11:46:20.252Z"
   },
   {
    "duration": 449,
    "start_time": "2021-09-19T11:46:20.276Z"
   },
   {
    "duration": 38,
    "start_time": "2021-09-19T11:46:20.727Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-19T11:46:20.767Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-19T11:46:20.792Z"
   },
   {
    "duration": 66,
    "start_time": "2021-09-19T11:46:20.806Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-19T11:57:45.372Z"
   },
   {
    "duration": 607,
    "start_time": "2021-09-19T12:09:08.862Z"
   },
   {
    "duration": 596,
    "start_time": "2021-09-19T12:10:12.711Z"
   },
   {
    "duration": 451,
    "start_time": "2021-09-20T12:25:24.785Z"
   },
   {
    "duration": 907,
    "start_time": "2021-09-20T12:25:42.050Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-20T12:25:42.960Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-20T12:25:42.979Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-20T12:25:42.992Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-20T12:25:42.998Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-20T12:25:43.007Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-20T12:25:43.014Z"
   },
   {
    "duration": 57,
    "start_time": "2021-09-20T12:25:43.028Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-20T12:25:43.088Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-20T12:25:43.098Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-20T12:25:43.124Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-20T12:25:43.133Z"
   },
   {
    "duration": 36,
    "start_time": "2021-09-20T12:25:43.143Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-20T12:25:43.181Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-20T12:25:43.207Z"
   },
   {
    "duration": 5105,
    "start_time": "2021-09-20T12:25:43.249Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-20T12:25:48.356Z"
   },
   {
    "duration": 387,
    "start_time": "2021-09-20T12:25:48.380Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-20T12:25:48.769Z"
   },
   {
    "duration": 20,
    "start_time": "2021-09-20T12:25:48.796Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-20T12:25:48.818Z"
   },
   {
    "duration": 66,
    "start_time": "2021-09-20T12:25:48.832Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-20T12:25:48.900Z"
   },
   {
    "duration": 565,
    "start_time": "2021-09-20T12:25:48.907Z"
   },
   {
    "duration": 27,
    "start_time": "2021-09-20T12:25:49.476Z"
   },
   {
    "duration": 31,
    "start_time": "2021-09-20T12:42:51.265Z"
   },
   {
    "duration": 904,
    "start_time": "2021-09-20T17:01:40.012Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-20T17:01:40.919Z"
   },
   {
    "duration": 35,
    "start_time": "2021-09-20T17:01:40.941Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-20T17:01:40.980Z"
   },
   {
    "duration": 20,
    "start_time": "2021-09-20T17:01:40.990Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-20T17:01:41.014Z"
   },
   {
    "duration": 59,
    "start_time": "2021-09-20T17:01:41.026Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-20T17:01:41.089Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-20T17:01:41.125Z"
   },
   {
    "duration": 60,
    "start_time": "2021-09-20T17:01:41.168Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-20T17:01:41.231Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-20T17:01:41.256Z"
   },
   {
    "duration": 28,
    "start_time": "2021-09-20T17:01:41.283Z"
   },
   {
    "duration": 42,
    "start_time": "2021-09-20T17:01:41.315Z"
   },
   {
    "duration": 48,
    "start_time": "2021-09-20T17:01:41.361Z"
   },
   {
    "duration": 6412,
    "start_time": "2021-09-20T17:01:41.411Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-20T17:01:47.827Z"
   },
   {
    "duration": 444,
    "start_time": "2021-09-20T17:01:47.863Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-20T17:01:48.310Z"
   },
   {
    "duration": 44,
    "start_time": "2021-09-20T17:01:48.335Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-20T17:01:48.382Z"
   },
   {
    "duration": 67,
    "start_time": "2021-09-20T17:01:48.403Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-20T17:01:48.473Z"
   },
   {
    "duration": 1429,
    "start_time": "2021-09-20T17:01:48.485Z"
   },
   {
    "duration": 60,
    "start_time": "2021-09-20T17:01:49.917Z"
   },
   {
    "duration": 94,
    "start_time": "2021-09-20T17:01:49.982Z"
   },
   {
    "duration": 44,
    "start_time": "2021-09-20T17:09:02.862Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-20T17:09:13.338Z"
   },
   {
    "duration": 796,
    "start_time": "2021-09-21T05:58:02.167Z"
   },
   {
    "duration": 56,
    "start_time": "2021-09-21T05:58:17.096Z"
   },
   {
    "duration": 265,
    "start_time": "2021-09-21T06:10:32.904Z"
   },
   {
    "duration": 61,
    "start_time": "2021-09-21T06:10:36.809Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-21T06:10:36.873Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T06:10:36.887Z"
   },
   {
    "duration": 3,
    "start_time": "2021-09-21T06:10:36.900Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T06:10:36.905Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T06:10:36.915Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-21T06:10:36.921Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T06:10:36.930Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-21T06:10:36.977Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-21T06:10:36.997Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-21T06:10:37.005Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-21T06:10:37.024Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T06:10:37.032Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-21T06:10:37.042Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-21T06:10:37.084Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-21T06:10:37.105Z"
   },
   {
    "duration": 4529,
    "start_time": "2021-09-21T06:10:37.139Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T06:10:41.677Z"
   },
   {
    "duration": 272,
    "start_time": "2021-09-21T06:10:41.687Z"
   },
   {
    "duration": 325,
    "start_time": "2021-09-21T06:10:41.961Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-21T06:10:42.288Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-21T06:10:42.304Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-21T06:10:42.338Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-21T06:10:42.359Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-21T06:10:42.391Z"
   },
   {
    "duration": 383,
    "start_time": "2021-09-21T06:10:42.400Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-21T06:10:42.787Z"
   },
   {
    "duration": 34,
    "start_time": "2021-09-21T06:10:42.810Z"
   },
   {
    "duration": 118,
    "start_time": "2021-09-21T06:12:32.622Z"
   },
   {
    "duration": 269,
    "start_time": "2021-09-21T06:12:45.901Z"
   },
   {
    "duration": 416,
    "start_time": "2021-09-21T06:18:02.511Z"
   },
   {
    "duration": 361,
    "start_time": "2021-09-21T06:19:17.233Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-21T06:19:42.061Z"
   },
   {
    "duration": 288,
    "start_time": "2021-09-21T06:29:44.680Z"
   },
   {
    "duration": 58,
    "start_time": "2021-09-21T06:29:46.337Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-21T06:29:46.397Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-21T06:29:46.410Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T06:29:46.421Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-21T06:29:46.427Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-21T06:29:46.434Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-21T06:29:46.477Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T06:29:46.485Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-21T06:29:46.499Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-21T06:29:46.517Z"
   },
   {
    "duration": 54,
    "start_time": "2021-09-21T06:29:46.525Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-21T06:29:46.581Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-21T06:29:46.588Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T06:29:46.604Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-21T06:29:46.617Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-21T06:29:46.641Z"
   },
   {
    "duration": 4271,
    "start_time": "2021-09-21T06:29:46.683Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T06:29:50.956Z"
   },
   {
    "duration": 268,
    "start_time": "2021-09-21T06:29:50.977Z"
   },
   {
    "duration": 277,
    "start_time": "2021-09-21T06:29:51.247Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-21T06:29:51.526Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-21T06:29:51.542Z"
   },
   {
    "duration": 293,
    "start_time": "2021-09-21T06:29:51.553Z"
   },
   {
    "duration": 29,
    "start_time": "2021-09-21T06:29:51.848Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T06:29:51.879Z"
   },
   {
    "duration": 29,
    "start_time": "2021-09-21T06:29:51.892Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T06:29:51.925Z"
   },
   {
    "duration": 396,
    "start_time": "2021-09-21T06:29:51.931Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-21T06:29:52.330Z"
   },
   {
    "duration": 47,
    "start_time": "2021-09-21T06:29:52.355Z"
   },
   {
    "duration": 431,
    "start_time": "2021-09-21T09:22:14.113Z"
   },
   {
    "duration": 58,
    "start_time": "2021-09-21T09:24:00.263Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T09:24:00.323Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-21T09:24:00.336Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T09:24:00.377Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-21T09:24:00.382Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-21T09:24:00.398Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-21T09:24:00.404Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-21T09:24:00.415Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-21T09:24:00.431Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-21T09:24:00.449Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-21T09:24:00.482Z"
   },
   {
    "duration": 20,
    "start_time": "2021-09-21T09:24:00.516Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-21T09:24:00.538Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-21T09:24:00.558Z"
   },
   {
    "duration": 33,
    "start_time": "2021-09-21T09:24:00.586Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-21T09:24:00.621Z"
   },
   {
    "duration": 4606,
    "start_time": "2021-09-21T09:24:00.653Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-21T09:24:05.261Z"
   },
   {
    "duration": 264,
    "start_time": "2021-09-21T09:24:05.285Z"
   },
   {
    "duration": 273,
    "start_time": "2021-09-21T09:24:05.550Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-21T09:24:05.825Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-21T09:24:05.839Z"
   },
   {
    "duration": 299,
    "start_time": "2021-09-21T09:24:05.851Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-21T09:24:06.152Z"
   },
   {
    "duration": 370,
    "start_time": "2021-09-21T09:24:06.177Z"
   },
   {
    "duration": -82,
    "start_time": "2021-09-21T09:24:06.632Z"
   },
   {
    "duration": -82,
    "start_time": "2021-09-21T09:24:06.633Z"
   },
   {
    "duration": -83,
    "start_time": "2021-09-21T09:24:06.635Z"
   },
   {
    "duration": -83,
    "start_time": "2021-09-21T09:24:06.636Z"
   },
   {
    "duration": -84,
    "start_time": "2021-09-21T09:24:06.638Z"
   },
   {
    "duration": -87,
    "start_time": "2021-09-21T09:24:06.642Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-21T09:31:10.333Z"
   },
   {
    "duration": 383,
    "start_time": "2021-09-21T09:50:55.417Z"
   },
   {
    "duration": 374,
    "start_time": "2021-09-21T09:51:05.860Z"
   },
   {
    "duration": 20,
    "start_time": "2021-09-21T09:51:10.889Z"
   },
   {
    "duration": 353,
    "start_time": "2021-09-21T09:51:13.280Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T09:52:51.088Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-21T09:53:02.948Z"
   },
   {
    "duration": 147,
    "start_time": "2021-09-21T09:53:19.086Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-21T09:53:37.791Z"
   },
   {
    "duration": 361,
    "start_time": "2021-09-21T09:53:53.385Z"
   },
   {
    "duration": 144,
    "start_time": "2021-09-21T09:55:30.102Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-21T09:55:42.757Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-21T09:57:06.909Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-21T09:57:57.277Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-21T09:58:00.670Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-21T10:00:01.590Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T10:00:08.962Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-21T10:01:29.517Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-21T10:01:32.469Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-21T10:07:11.572Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T10:07:13.740Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-21T10:09:19.132Z"
   },
   {
    "duration": -84,
    "start_time": "2021-09-21T10:09:28.450Z"
   },
   {
    "duration": 7034,
    "start_time": "2021-09-21T10:09:50.229Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-21T10:10:14.444Z"
   },
   {
    "duration": 8743,
    "start_time": "2021-09-21T10:11:28.214Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-21T10:14:13.244Z"
   },
   {
    "duration": 1763,
    "start_time": "2021-09-21T10:14:16.244Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-21T10:26:07.099Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-21T10:27:21.031Z"
   },
   {
    "duration": 1406,
    "start_time": "2021-09-21T10:27:23.349Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T10:27:55.773Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T10:28:09.662Z"
   },
   {
    "duration": 473,
    "start_time": "2021-09-21T10:28:18.069Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-21T10:28:21.469Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T10:28:23.701Z"
   },
   {
    "duration": 397,
    "start_time": "2021-09-21T10:30:23.805Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-21T10:30:38.341Z"
   },
   {
    "duration": 20,
    "start_time": "2021-09-21T10:30:40.350Z"
   },
   {
    "duration": 24,
    "start_time": "2021-09-21T10:31:01.927Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-21T10:31:03.813Z"
   },
   {
    "duration": 60,
    "start_time": "2021-09-21T10:35:47.089Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-21T10:35:47.151Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-21T10:35:47.165Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T10:35:47.181Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-21T10:35:47.187Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T10:35:47.196Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T10:35:47.201Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T10:35:47.211Z"
   },
   {
    "duration": 52,
    "start_time": "2021-09-21T10:35:47.225Z"
   },
   {
    "duration": 7,
    "start_time": "2021-09-21T10:35:47.280Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-21T10:35:47.289Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-21T10:35:47.309Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-21T10:35:47.319Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T10:35:47.329Z"
   },
   {
    "duration": 55,
    "start_time": "2021-09-21T10:35:47.338Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-21T10:35:47.395Z"
   },
   {
    "duration": 4812,
    "start_time": "2021-09-21T10:35:47.427Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-21T10:35:52.242Z"
   },
   {
    "duration": 275,
    "start_time": "2021-09-21T10:35:52.253Z"
   },
   {
    "duration": 300,
    "start_time": "2021-09-21T10:35:52.530Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-21T10:35:52.832Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-21T10:35:52.847Z"
   },
   {
    "duration": 486,
    "start_time": "2021-09-21T10:35:52.857Z"
   },
   {
    "duration": 21,
    "start_time": "2021-09-21T10:35:53.345Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-21T10:35:53.376Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-21T10:35:53.403Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-21T10:35:53.417Z"
   },
   {
    "duration": 57,
    "start_time": "2021-09-21T10:35:53.431Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-21T10:35:53.490Z"
   },
   {
    "duration": 380,
    "start_time": "2021-09-21T10:35:53.496Z"
   },
   {
    "duration": 19,
    "start_time": "2021-09-21T10:35:53.878Z"
   },
   {
    "duration": 34,
    "start_time": "2021-09-21T10:35:53.899Z"
   },
   {
    "duration": 659,
    "start_time": "2021-09-22T06:51:48.908Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-22T06:51:49.569Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-22T06:51:49.583Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-22T06:51:49.596Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-22T06:51:49.602Z"
   },
   {
    "duration": 6,
    "start_time": "2021-09-22T06:51:49.613Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-22T06:51:49.621Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-22T06:51:49.664Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-22T06:51:49.678Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-22T06:51:49.706Z"
   },
   {
    "duration": 55,
    "start_time": "2021-09-22T06:51:49.717Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-22T06:51:49.774Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-22T06:51:49.785Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-22T06:51:49.796Z"
   },
   {
    "duration": 44,
    "start_time": "2021-09-22T06:51:49.812Z"
   },
   {
    "duration": 38,
    "start_time": "2021-09-22T06:51:49.858Z"
   },
   {
    "duration": 4829,
    "start_time": "2021-09-22T06:51:49.898Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-22T06:51:54.729Z"
   },
   {
    "duration": 295,
    "start_time": "2021-09-22T06:51:54.740Z"
   },
   {
    "duration": 294,
    "start_time": "2021-09-22T06:51:55.037Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-22T06:51:55.334Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-22T06:51:55.358Z"
   },
   {
    "duration": 317,
    "start_time": "2021-09-22T06:51:55.370Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-22T06:51:55.690Z"
   },
   {
    "duration": 43,
    "start_time": "2021-09-22T06:51:55.709Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-22T06:51:55.754Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-22T06:51:55.774Z"
   },
   {
    "duration": 28,
    "start_time": "2021-09-22T06:51:55.786Z"
   },
   {
    "duration": 4,
    "start_time": "2021-09-22T06:51:55.816Z"
   },
   {
    "duration": 414,
    "start_time": "2021-09-22T06:51:55.821Z"
   },
   {
    "duration": 37,
    "start_time": "2021-09-22T06:51:56.237Z"
   },
   {
    "duration": 45,
    "start_time": "2021-09-22T06:51:56.277Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-22T06:56:00.443Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-22T06:56:11.497Z"
   },
   {
    "duration": 3511,
    "start_time": "2021-09-22T06:58:07.906Z"
   },
   {
    "duration": 556,
    "start_time": "2021-09-22T06:58:18.506Z"
   },
   {
    "duration": 33,
    "start_time": "2021-09-22T06:59:35.484Z"
   },
   {
    "duration": 22,
    "start_time": "2021-09-22T06:59:49.025Z"
   },
   {
    "duration": 20,
    "start_time": "2021-09-22T07:01:45.963Z"
   },
   {
    "duration": 437,
    "start_time": "2021-09-23T10:26:43.483Z"
   },
   {
    "duration": 293,
    "start_time": "2021-09-23T10:26:54.934Z"
   },
   {
    "duration": 818,
    "start_time": "2021-09-23T10:27:02.474Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-23T10:27:03.295Z"
   },
   {
    "duration": 31,
    "start_time": "2021-09-23T10:27:03.313Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-23T10:27:03.347Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-23T10:27:03.354Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-23T10:27:03.374Z"
   },
   {
    "duration": 39,
    "start_time": "2021-09-23T10:27:03.391Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-23T10:27:03.434Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-23T10:27:03.454Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-23T10:27:03.482Z"
   },
   {
    "duration": 28,
    "start_time": "2021-09-23T10:27:03.524Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-23T10:27:03.554Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-23T10:27:03.564Z"
   },
   {
    "duration": 49,
    "start_time": "2021-09-23T10:27:03.583Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-23T10:27:03.635Z"
   },
   {
    "duration": 65,
    "start_time": "2021-09-23T10:27:03.662Z"
   },
   {
    "duration": 5754,
    "start_time": "2021-09-23T10:27:03.730Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-23T10:27:09.486Z"
   },
   {
    "duration": 509,
    "start_time": "2021-09-23T10:27:09.530Z"
   },
   {
    "duration": -48,
    "start_time": "2021-09-23T10:27:10.090Z"
   },
   {
    "duration": -50,
    "start_time": "2021-09-23T10:27:10.094Z"
   },
   {
    "duration": -51,
    "start_time": "2021-09-23T10:27:10.096Z"
   },
   {
    "duration": -51,
    "start_time": "2021-09-23T10:27:10.097Z"
   },
   {
    "duration": -51,
    "start_time": "2021-09-23T10:27:10.099Z"
   },
   {
    "duration": -51,
    "start_time": "2021-09-23T10:27:10.100Z"
   },
   {
    "duration": -52,
    "start_time": "2021-09-23T10:27:10.102Z"
   },
   {
    "duration": -52,
    "start_time": "2021-09-23T10:27:10.103Z"
   },
   {
    "duration": -51,
    "start_time": "2021-09-23T10:27:10.105Z"
   },
   {
    "duration": -50,
    "start_time": "2021-09-23T10:27:10.106Z"
   },
   {
    "duration": -54,
    "start_time": "2021-09-23T10:27:10.111Z"
   },
   {
    "duration": -55,
    "start_time": "2021-09-23T10:27:10.113Z"
   },
   {
    "duration": -54,
    "start_time": "2021-09-23T10:27:10.114Z"
   },
   {
    "duration": 69,
    "start_time": "2021-09-23T10:28:13.010Z"
   },
   {
    "duration": 42,
    "start_time": "2021-09-23T10:28:13.081Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-23T10:28:13.126Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-23T10:28:13.144Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-23T10:28:13.151Z"
   },
   {
    "duration": 11,
    "start_time": "2021-09-23T10:28:13.167Z"
   },
   {
    "duration": 42,
    "start_time": "2021-09-23T10:28:13.181Z"
   },
   {
    "duration": 15,
    "start_time": "2021-09-23T10:28:13.227Z"
   },
   {
    "duration": 27,
    "start_time": "2021-09-23T10:28:13.245Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-23T10:28:13.274Z"
   },
   {
    "duration": 54,
    "start_time": "2021-09-23T10:28:13.285Z"
   },
   {
    "duration": 8,
    "start_time": "2021-09-23T10:28:13.342Z"
   },
   {
    "duration": 13,
    "start_time": "2021-09-23T10:28:13.353Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-23T10:28:13.369Z"
   },
   {
    "duration": 56,
    "start_time": "2021-09-23T10:28:13.384Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-23T10:28:13.443Z"
   },
   {
    "duration": 6304,
    "start_time": "2021-09-23T10:28:13.486Z"
   },
   {
    "duration": 29,
    "start_time": "2021-09-23T10:28:19.793Z"
   },
   {
    "duration": 429,
    "start_time": "2021-09-23T10:28:19.825Z"
   },
   {
    "duration": 466,
    "start_time": "2021-09-23T10:28:20.257Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-23T10:28:20.726Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-23T10:28:20.746Z"
   },
   {
    "duration": 1389,
    "start_time": "2021-09-23T10:28:20.769Z"
   },
   {
    "duration": 39,
    "start_time": "2021-09-23T10:28:22.162Z"
   },
   {
    "duration": 52,
    "start_time": "2021-09-23T10:28:22.222Z"
   },
   {
    "duration": 54,
    "start_time": "2021-09-23T10:28:22.278Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-23T10:28:22.335Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-23T10:28:22.352Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-23T10:28:22.424Z"
   },
   {
    "duration": 620,
    "start_time": "2021-09-23T10:28:22.431Z"
   },
   {
    "duration": 27,
    "start_time": "2021-09-23T10:28:23.054Z"
   },
   {
    "duration": 67,
    "start_time": "2021-09-23T10:28:23.084Z"
   },
   {
    "duration": 76,
    "start_time": "2021-09-24T04:59:44.953Z"
   },
   {
    "duration": 14,
    "start_time": "2021-09-24T04:59:45.031Z"
   },
   {
    "duration": 23,
    "start_time": "2021-09-24T04:59:45.049Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-24T04:59:45.075Z"
   },
   {
    "duration": 40,
    "start_time": "2021-09-24T04:59:45.083Z"
   },
   {
    "duration": 5,
    "start_time": "2021-09-24T04:59:45.126Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-24T04:59:45.133Z"
   },
   {
    "duration": 18,
    "start_time": "2021-09-24T04:59:45.154Z"
   },
   {
    "duration": 47,
    "start_time": "2021-09-24T04:59:45.175Z"
   },
   {
    "duration": 9,
    "start_time": "2021-09-24T04:59:45.225Z"
   },
   {
    "duration": 38,
    "start_time": "2021-09-24T04:59:45.237Z"
   },
   {
    "duration": 16,
    "start_time": "2021-09-24T04:59:45.278Z"
   },
   {
    "duration": 28,
    "start_time": "2021-09-24T04:59:45.296Z"
   },
   {
    "duration": 25,
    "start_time": "2021-09-24T04:59:45.326Z"
   },
   {
    "duration": 30,
    "start_time": "2021-09-24T04:59:45.353Z"
   },
   {
    "duration": 52,
    "start_time": "2021-09-24T04:59:45.385Z"
   },
   {
    "duration": 5604,
    "start_time": "2021-09-24T04:59:45.440Z"
   },
   {
    "duration": 12,
    "start_time": "2021-09-24T04:59:51.047Z"
   },
   {
    "duration": 421,
    "start_time": "2021-09-24T04:59:51.061Z"
   },
   {
    "duration": 443,
    "start_time": "2021-09-24T04:59:51.485Z"
   },
   {
    "duration": 17,
    "start_time": "2021-09-24T04:59:51.931Z"
   },
   {
    "duration": 26,
    "start_time": "2021-09-24T04:59:51.951Z"
   },
   {
    "duration": 461,
    "start_time": "2021-09-24T04:59:51.982Z"
   },
   {
    "duration": 20,
    "start_time": "2021-09-24T04:59:52.446Z"
   },
   {
    "duration": 31,
    "start_time": "2021-09-24T04:59:52.468Z"
   },
   {
    "duration": 32,
    "start_time": "2021-09-24T04:59:52.501Z"
   },
   {
    "duration": 29,
    "start_time": "2021-09-24T04:59:52.536Z"
   },
   {
    "duration": 46,
    "start_time": "2021-09-24T04:59:52.568Z"
   },
   {
    "duration": 10,
    "start_time": "2021-09-24T04:59:52.617Z"
   },
   {
    "duration": 592,
    "start_time": "2021-09-24T04:59:52.630Z"
   },
   {
    "duration": 28,
    "start_time": "2021-09-24T04:59:53.224Z"
   },
   {
    "duration": 41,
    "start_time": "2021-09-24T04:59:53.254Z"
   },
   {
    "duration": 263,
    "start_time": "2021-09-24T05:02:36.971Z"
   },
   {
    "duration": 760,
    "start_time": "2021-09-24T05:02:49.564Z"
   },
   {
    "duration": 34,
    "start_time": "2021-09-24T05:12:30.069Z"
   },
   {
    "duration": 44,
    "start_time": "2021-09-24T05:14:54.255Z"
   },
   {
    "duration": 698,
    "start_time": "2022-08-22T10:18:50.839Z"
   },
   {
    "duration": 13,
    "start_time": "2022-08-22T10:18:51.539Z"
   },
   {
    "duration": 10,
    "start_time": "2022-08-22T10:18:51.554Z"
   },
   {
    "duration": 3,
    "start_time": "2022-08-22T10:18:51.566Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:18:51.570Z"
   },
   {
    "duration": 4,
    "start_time": "2022-08-22T10:18:51.578Z"
   },
   {
    "duration": 10,
    "start_time": "2022-08-22T10:18:51.583Z"
   },
   {
    "duration": 13,
    "start_time": "2022-08-22T10:18:51.594Z"
   },
   {
    "duration": 57,
    "start_time": "2022-08-22T10:18:51.608Z"
   },
   {
    "duration": 5,
    "start_time": "2022-08-22T10:18:51.668Z"
   },
   {
    "duration": 19,
    "start_time": "2022-08-22T10:18:51.674Z"
   },
   {
    "duration": 9,
    "start_time": "2022-08-22T10:18:51.695Z"
   },
   {
    "duration": 17,
    "start_time": "2022-08-22T10:18:51.705Z"
   },
   {
    "duration": 9,
    "start_time": "2022-08-22T10:18:51.723Z"
   },
   {
    "duration": 29,
    "start_time": "2022-08-22T10:18:51.733Z"
   },
   {
    "duration": 33,
    "start_time": "2022-08-22T10:18:51.763Z"
   },
   {
    "duration": 4147,
    "start_time": "2022-08-22T10:18:51.797Z"
   },
   {
    "duration": 21,
    "start_time": "2022-08-22T10:18:55.946Z"
   },
   {
    "duration": 204,
    "start_time": "2022-08-22T10:18:55.969Z"
   },
   {
    "duration": 163,
    "start_time": "2022-08-22T10:18:56.175Z"
   },
   {
    "duration": 22,
    "start_time": "2022-08-22T10:18:56.340Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:18:56.364Z"
   },
   {
    "duration": 181,
    "start_time": "2022-08-22T10:18:56.373Z"
   },
   {
    "duration": 14,
    "start_time": "2022-08-22T10:18:56.557Z"
   },
   {
    "duration": 18,
    "start_time": "2022-08-22T10:18:56.573Z"
   },
   {
    "duration": 10,
    "start_time": "2022-08-22T10:18:56.592Z"
   },
   {
    "duration": 464,
    "start_time": "2022-08-22T10:18:56.603Z"
   },
   {
    "duration": 10,
    "start_time": "2022-08-22T10:18:57.070Z"
   },
   {
    "duration": 56,
    "start_time": "2022-08-22T10:18:57.081Z"
   },
   {
    "duration": 5,
    "start_time": "2022-08-22T10:18:57.138Z"
   },
   {
    "duration": 230,
    "start_time": "2022-08-22T10:18:57.144Z"
   },
   {
    "duration": 22,
    "start_time": "2022-08-22T10:18:57.377Z"
   },
   {
    "duration": 31,
    "start_time": "2022-08-22T10:18:57.401Z"
   },
   {
    "duration": 159,
    "start_time": "2022-08-22T10:32:46.947Z"
   },
   {
    "duration": 71,
    "start_time": "2022-08-22T10:34:22.364Z"
   },
   {
    "duration": 416,
    "start_time": "2022-08-22T10:37:28.445Z"
   },
   {
    "duration": 87,
    "start_time": "2022-08-22T10:37:28.863Z"
   },
   {
    "duration": 14,
    "start_time": "2022-08-22T10:37:28.951Z"
   },
   {
    "duration": 10,
    "start_time": "2022-08-22T10:37:28.966Z"
   },
   {
    "duration": 4,
    "start_time": "2022-08-22T10:37:28.978Z"
   },
   {
    "duration": 9,
    "start_time": "2022-08-22T10:37:28.983Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:37:28.994Z"
   },
   {
    "duration": 8,
    "start_time": "2022-08-22T10:37:29.002Z"
   },
   {
    "duration": 19,
    "start_time": "2022-08-22T10:37:29.011Z"
   },
   {
    "duration": 46,
    "start_time": "2022-08-22T10:37:29.034Z"
   },
   {
    "duration": 5,
    "start_time": "2022-08-22T10:37:29.082Z"
   },
   {
    "duration": 30,
    "start_time": "2022-08-22T10:37:29.089Z"
   },
   {
    "duration": 13,
    "start_time": "2022-08-22T10:37:29.121Z"
   },
   {
    "duration": 21,
    "start_time": "2022-08-22T10:37:29.136Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:37:29.158Z"
   },
   {
    "duration": 21,
    "start_time": "2022-08-22T10:37:29.167Z"
   },
   {
    "duration": 32,
    "start_time": "2022-08-22T10:37:29.190Z"
   },
   {
    "duration": 3690,
    "start_time": "2022-08-22T10:37:29.224Z"
   },
   {
    "duration": 8,
    "start_time": "2022-08-22T10:37:32.916Z"
   },
   {
    "duration": 169,
    "start_time": "2022-08-22T10:37:32.926Z"
   },
   {
    "duration": 154,
    "start_time": "2022-08-22T10:37:33.097Z"
   },
   {
    "duration": 16,
    "start_time": "2022-08-22T10:37:33.258Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:37:33.276Z"
   },
   {
    "duration": 168,
    "start_time": "2022-08-22T10:37:33.285Z"
   },
   {
    "duration": 15,
    "start_time": "2022-08-22T10:37:33.455Z"
   },
   {
    "duration": 16,
    "start_time": "2022-08-22T10:37:33.471Z"
   },
   {
    "duration": 15,
    "start_time": "2022-08-22T10:37:33.488Z"
   },
   {
    "duration": 307,
    "start_time": "2022-08-22T10:37:33.507Z"
   },
   {
    "duration": 13,
    "start_time": "2022-08-22T10:37:33.816Z"
   },
   {
    "duration": 44,
    "start_time": "2022-08-22T10:37:33.831Z"
   },
   {
    "duration": 57,
    "start_time": "2022-08-22T10:37:33.877Z"
   },
   {
    "duration": 270,
    "start_time": "2022-08-22T10:37:33.936Z"
   },
   {
    "duration": 17,
    "start_time": "2022-08-22T10:37:34.208Z"
   },
   {
    "duration": 57,
    "start_time": "2022-08-22T10:37:34.227Z"
   },
   {
    "duration": 411,
    "start_time": "2022-08-22T10:37:49.146Z"
   },
   {
    "duration": 84,
    "start_time": "2022-08-22T10:37:49.559Z"
   },
   {
    "duration": 14,
    "start_time": "2022-08-22T10:37:49.645Z"
   },
   {
    "duration": 9,
    "start_time": "2022-08-22T10:37:49.661Z"
   },
   {
    "duration": 5,
    "start_time": "2022-08-22T10:37:49.672Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:37:49.679Z"
   },
   {
    "duration": 5,
    "start_time": "2022-08-22T10:37:49.687Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:37:49.693Z"
   },
   {
    "duration": 15,
    "start_time": "2022-08-22T10:37:49.701Z"
   },
   {
    "duration": 55,
    "start_time": "2022-08-22T10:37:49.721Z"
   },
   {
    "duration": 6,
    "start_time": "2022-08-22T10:37:49.777Z"
   },
   {
    "duration": 18,
    "start_time": "2022-08-22T10:37:49.784Z"
   },
   {
    "duration": 7,
    "start_time": "2022-08-22T10:37:49.804Z"
   },
   {
    "duration": 10,
    "start_time": "2022-08-22T10:37:49.813Z"
   },
   {
    "duration": 34,
    "start_time": "2022-08-22T10:37:49.825Z"
   },
   {
    "duration": 20,
    "start_time": "2022-08-22T10:37:49.861Z"
   },
   {
    "duration": 33,
    "start_time": "2022-08-22T10:37:49.883Z"
   },
   {
    "duration": 3809,
    "start_time": "2022-08-22T10:37:49.917Z"
   },
   {
    "duration": 11,
    "start_time": "2022-08-22T10:37:53.728Z"
   },
   {
    "duration": 171,
    "start_time": "2022-08-22T10:37:53.740Z"
   },
   {
    "duration": 161,
    "start_time": "2022-08-22T10:37:53.912Z"
   },
   {
    "duration": 16,
    "start_time": "2022-08-22T10:37:54.074Z"
   },
   {
    "duration": 28,
    "start_time": "2022-08-22T10:37:54.091Z"
   },
   {
    "duration": 183,
    "start_time": "2022-08-22T10:37:54.120Z"
   },
   {
    "duration": 13,
    "start_time": "2022-08-22T10:37:54.305Z"
   },
   {
    "duration": 26,
    "start_time": "2022-08-22T10:37:54.319Z"
   },
   {
    "duration": 21,
    "start_time": "2022-08-22T10:37:54.347Z"
   },
   {
    "duration": 285,
    "start_time": "2022-08-22T10:37:54.371Z"
   },
   {
    "duration": 12,
    "start_time": "2022-08-22T10:37:54.657Z"
   },
   {
    "duration": 35,
    "start_time": "2022-08-22T10:37:54.671Z"
   },
   {
    "duration": 22,
    "start_time": "2022-08-22T10:37:54.708Z"
   },
   {
    "duration": 207,
    "start_time": "2022-08-22T10:37:54.732Z"
   },
   {
    "duration": 22,
    "start_time": "2022-08-22T10:37:54.941Z"
   },
   {
    "duration": 56,
    "start_time": "2022-08-22T10:37:54.965Z"
   }
  ],
  "celltoolbar": "Необработанный формат ячейки",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
